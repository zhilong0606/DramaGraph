// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Assets/DramaGraph/NodeDefineIl/Structure.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DramaScript {

  /// <summary>Holder for reflection information generated from Assets/DramaGraph/NodeDefineIl/Structure.proto</summary>
  public static partial class StructureReflection {

    #region Descriptor
    /// <summary>File descriptor for Assets/DramaGraph/NodeDefineIl/Structure.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static StructureReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci5Bc3NldHMvRHJhbWFHcmFwaC9Ob2RlRGVmaW5lSWwvU3RydWN0dXJlLnBy",
            "b3RvEgtEcmFtYVNjcmlwdCJNChxEcmFtYVNjcmlwdE5vZGVEYXRhQ29udGFp",
            "bmVyEgoKAmlkGAEgASgFEhAKCHR5cGVOYW1lGAIgASgJEg8KB2J1ZmZlcnMY",
            "AyABKAwifQoTRHJhbWFTY3JpcHRFZGdlRGF0YRIQCgh0eXBlTmFtZRgBIAEo",
            "CRITCgtpbnB1dE5vZGVJZBgCIAEoBRITCgtpbnB1dFBvcnRJZBgDIAEoBRIU",
            "CgxvdXRwdXROb2RlSWQYBCABKAUSFAoMb3V0cHV0UG9ydElkGAUgASgFIpAB",
            "ChREcmFtYVNjcmlwdEdyYXBoRGF0YRJEChFub2RlQ29udGFpbmVyTGlzdBgB",
            "IAMoCzIpLkRyYW1hU2NyaXB0LkRyYW1hU2NyaXB0Tm9kZURhdGFDb250YWlu",
            "ZXISMgoIZWRnZUxpc3QYAiADKAsyIC5EcmFtYVNjcmlwdC5EcmFtYVNjcmlw",
            "dEVkZ2VEYXRhIhoKGERyYW1hU2NyaXB0Tm9kZURhdGFFbnRyeSIsChxEcmFt",
            "YVNjcmlwdE5vZGVEYXRhVGltZUVudHJ5EgwKBFRpbWUYASABKAIiGQoXRHJh",
            "bWFTY3JpcHROb2RlRGF0YUV4aXQiSAogRHJhbWFTY3JpcHROb2RlRGF0YVBs",
            "YXlBbmltYXRpb24SFQoNQW5pbWF0aW9uTmFtZRgBIAEoCRINCgVTcGVlZBgC",
            "IAEoAiIuCh5EcmFtYVNjcmlwdE5vZGVEYXRhU3Bhd25FZmZlY3QSDAoEUGF0",
            "aBgBIAEoCWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DramaScript.DramaScriptNodeDataContainer), global::DramaScript.DramaScriptNodeDataContainer.Parser, new[]{ "Id", "TypeName", "Buffers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DramaScript.DramaScriptEdgeData), global::DramaScript.DramaScriptEdgeData.Parser, new[]{ "TypeName", "InputNodeId", "InputPortId", "OutputNodeId", "OutputPortId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DramaScript.DramaScriptGraphData), global::DramaScript.DramaScriptGraphData.Parser, new[]{ "NodeContainerList", "EdgeList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DramaScript.DramaScriptNodeDataEntry), global::DramaScript.DramaScriptNodeDataEntry.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DramaScript.DramaScriptNodeDataTimeEntry), global::DramaScript.DramaScriptNodeDataTimeEntry.Parser, new[]{ "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DramaScript.DramaScriptNodeDataExit), global::DramaScript.DramaScriptNodeDataExit.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DramaScript.DramaScriptNodeDataPlayAnimation), global::DramaScript.DramaScriptNodeDataPlayAnimation.Parser, new[]{ "AnimationName", "Speed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DramaScript.DramaScriptNodeDataSpawnEffect), global::DramaScript.DramaScriptNodeDataSpawnEffect.Parser, new[]{ "Path" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class DramaScriptNodeDataContainer : pb::IMessage<DramaScriptNodeDataContainer> {
    private static readonly pb::MessageParser<DramaScriptNodeDataContainer> _parser = new pb::MessageParser<DramaScriptNodeDataContainer>(() => new DramaScriptNodeDataContainer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DramaScriptNodeDataContainer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DramaScript.StructureReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DramaScriptNodeDataContainer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DramaScriptNodeDataContainer(DramaScriptNodeDataContainer other) : this() {
      id_ = other.id_;
      typeName_ = other.typeName_;
      buffers_ = other.buffers_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DramaScriptNodeDataContainer Clone() {
      return new DramaScriptNodeDataContainer(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "typeName" field.</summary>
    public const int TypeNameFieldNumber = 2;
    private string typeName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TypeName {
      get { return typeName_; }
      set {
        typeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "buffers" field.</summary>
    public const int BuffersFieldNumber = 3;
    private pb::ByteString buffers_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Buffers {
      get { return buffers_; }
      set {
        buffers_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DramaScriptNodeDataContainer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DramaScriptNodeDataContainer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (TypeName != other.TypeName) return false;
      if (Buffers != other.Buffers) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (TypeName.Length != 0) hash ^= TypeName.GetHashCode();
      if (Buffers.Length != 0) hash ^= Buffers.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (TypeName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TypeName);
      }
      if (Buffers.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Buffers);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (TypeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TypeName);
      }
      if (Buffers.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Buffers);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DramaScriptNodeDataContainer other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.TypeName.Length != 0) {
        TypeName = other.TypeName;
      }
      if (other.Buffers.Length != 0) {
        Buffers = other.Buffers;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            TypeName = input.ReadString();
            break;
          }
          case 26: {
            Buffers = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DramaScriptEdgeData : pb::IMessage<DramaScriptEdgeData> {
    private static readonly pb::MessageParser<DramaScriptEdgeData> _parser = new pb::MessageParser<DramaScriptEdgeData>(() => new DramaScriptEdgeData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DramaScriptEdgeData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DramaScript.StructureReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DramaScriptEdgeData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DramaScriptEdgeData(DramaScriptEdgeData other) : this() {
      typeName_ = other.typeName_;
      inputNodeId_ = other.inputNodeId_;
      inputPortId_ = other.inputPortId_;
      outputNodeId_ = other.outputNodeId_;
      outputPortId_ = other.outputPortId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DramaScriptEdgeData Clone() {
      return new DramaScriptEdgeData(this);
    }

    /// <summary>Field number for the "typeName" field.</summary>
    public const int TypeNameFieldNumber = 1;
    private string typeName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TypeName {
      get { return typeName_; }
      set {
        typeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "inputNodeId" field.</summary>
    public const int InputNodeIdFieldNumber = 2;
    private int inputNodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InputNodeId {
      get { return inputNodeId_; }
      set {
        inputNodeId_ = value;
      }
    }

    /// <summary>Field number for the "inputPortId" field.</summary>
    public const int InputPortIdFieldNumber = 3;
    private int inputPortId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InputPortId {
      get { return inputPortId_; }
      set {
        inputPortId_ = value;
      }
    }

    /// <summary>Field number for the "outputNodeId" field.</summary>
    public const int OutputNodeIdFieldNumber = 4;
    private int outputNodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OutputNodeId {
      get { return outputNodeId_; }
      set {
        outputNodeId_ = value;
      }
    }

    /// <summary>Field number for the "outputPortId" field.</summary>
    public const int OutputPortIdFieldNumber = 5;
    private int outputPortId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OutputPortId {
      get { return outputPortId_; }
      set {
        outputPortId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DramaScriptEdgeData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DramaScriptEdgeData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TypeName != other.TypeName) return false;
      if (InputNodeId != other.InputNodeId) return false;
      if (InputPortId != other.InputPortId) return false;
      if (OutputNodeId != other.OutputNodeId) return false;
      if (OutputPortId != other.OutputPortId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TypeName.Length != 0) hash ^= TypeName.GetHashCode();
      if (InputNodeId != 0) hash ^= InputNodeId.GetHashCode();
      if (InputPortId != 0) hash ^= InputPortId.GetHashCode();
      if (OutputNodeId != 0) hash ^= OutputNodeId.GetHashCode();
      if (OutputPortId != 0) hash ^= OutputPortId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TypeName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TypeName);
      }
      if (InputNodeId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(InputNodeId);
      }
      if (InputPortId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(InputPortId);
      }
      if (OutputNodeId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(OutputNodeId);
      }
      if (OutputPortId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(OutputPortId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TypeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TypeName);
      }
      if (InputNodeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InputNodeId);
      }
      if (InputPortId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InputPortId);
      }
      if (OutputNodeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutputNodeId);
      }
      if (OutputPortId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutputPortId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DramaScriptEdgeData other) {
      if (other == null) {
        return;
      }
      if (other.TypeName.Length != 0) {
        TypeName = other.TypeName;
      }
      if (other.InputNodeId != 0) {
        InputNodeId = other.InputNodeId;
      }
      if (other.InputPortId != 0) {
        InputPortId = other.InputPortId;
      }
      if (other.OutputNodeId != 0) {
        OutputNodeId = other.OutputNodeId;
      }
      if (other.OutputPortId != 0) {
        OutputPortId = other.OutputPortId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TypeName = input.ReadString();
            break;
          }
          case 16: {
            InputNodeId = input.ReadInt32();
            break;
          }
          case 24: {
            InputPortId = input.ReadInt32();
            break;
          }
          case 32: {
            OutputNodeId = input.ReadInt32();
            break;
          }
          case 40: {
            OutputPortId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DramaScriptGraphData : pb::IMessage<DramaScriptGraphData> {
    private static readonly pb::MessageParser<DramaScriptGraphData> _parser = new pb::MessageParser<DramaScriptGraphData>(() => new DramaScriptGraphData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DramaScriptGraphData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DramaScript.StructureReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DramaScriptGraphData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DramaScriptGraphData(DramaScriptGraphData other) : this() {
      nodeContainerList_ = other.nodeContainerList_.Clone();
      edgeList_ = other.edgeList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DramaScriptGraphData Clone() {
      return new DramaScriptGraphData(this);
    }

    /// <summary>Field number for the "nodeContainerList" field.</summary>
    public const int NodeContainerListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::DramaScript.DramaScriptNodeDataContainer> _repeated_nodeContainerList_codec
        = pb::FieldCodec.ForMessage(10, global::DramaScript.DramaScriptNodeDataContainer.Parser);
    private readonly pbc::RepeatedField<global::DramaScript.DramaScriptNodeDataContainer> nodeContainerList_ = new pbc::RepeatedField<global::DramaScript.DramaScriptNodeDataContainer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DramaScript.DramaScriptNodeDataContainer> NodeContainerList {
      get { return nodeContainerList_; }
    }

    /// <summary>Field number for the "edgeList" field.</summary>
    public const int EdgeListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::DramaScript.DramaScriptEdgeData> _repeated_edgeList_codec
        = pb::FieldCodec.ForMessage(18, global::DramaScript.DramaScriptEdgeData.Parser);
    private readonly pbc::RepeatedField<global::DramaScript.DramaScriptEdgeData> edgeList_ = new pbc::RepeatedField<global::DramaScript.DramaScriptEdgeData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DramaScript.DramaScriptEdgeData> EdgeList {
      get { return edgeList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DramaScriptGraphData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DramaScriptGraphData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!nodeContainerList_.Equals(other.nodeContainerList_)) return false;
      if(!edgeList_.Equals(other.edgeList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= nodeContainerList_.GetHashCode();
      hash ^= edgeList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      nodeContainerList_.WriteTo(output, _repeated_nodeContainerList_codec);
      edgeList_.WriteTo(output, _repeated_edgeList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += nodeContainerList_.CalculateSize(_repeated_nodeContainerList_codec);
      size += edgeList_.CalculateSize(_repeated_edgeList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DramaScriptGraphData other) {
      if (other == null) {
        return;
      }
      nodeContainerList_.Add(other.nodeContainerList_);
      edgeList_.Add(other.edgeList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            nodeContainerList_.AddEntriesFrom(input, _repeated_nodeContainerList_codec);
            break;
          }
          case 18: {
            edgeList_.AddEntriesFrom(input, _repeated_edgeList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DramaScriptNodeDataEntry : pb::IMessage<DramaScriptNodeDataEntry> {
    private static readonly pb::MessageParser<DramaScriptNodeDataEntry> _parser = new pb::MessageParser<DramaScriptNodeDataEntry>(() => new DramaScriptNodeDataEntry());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DramaScriptNodeDataEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DramaScript.StructureReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DramaScriptNodeDataEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DramaScriptNodeDataEntry(DramaScriptNodeDataEntry other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DramaScriptNodeDataEntry Clone() {
      return new DramaScriptNodeDataEntry(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DramaScriptNodeDataEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DramaScriptNodeDataEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DramaScriptNodeDataEntry other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class DramaScriptNodeDataTimeEntry : pb::IMessage<DramaScriptNodeDataTimeEntry> {
    private static readonly pb::MessageParser<DramaScriptNodeDataTimeEntry> _parser = new pb::MessageParser<DramaScriptNodeDataTimeEntry>(() => new DramaScriptNodeDataTimeEntry());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DramaScriptNodeDataTimeEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DramaScript.StructureReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DramaScriptNodeDataTimeEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DramaScriptNodeDataTimeEntry(DramaScriptNodeDataTimeEntry other) : this() {
      time_ = other.time_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DramaScriptNodeDataTimeEntry Clone() {
      return new DramaScriptNodeDataTimeEntry(this);
    }

    /// <summary>Field number for the "Time" field.</summary>
    public const int TimeFieldNumber = 1;
    private float time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DramaScriptNodeDataTimeEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DramaScriptNodeDataTimeEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time != 0F) hash ^= Time.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Time);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DramaScriptNodeDataTimeEntry other) {
      if (other == null) {
        return;
      }
      if (other.Time != 0F) {
        Time = other.Time;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Time = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DramaScriptNodeDataExit : pb::IMessage<DramaScriptNodeDataExit> {
    private static readonly pb::MessageParser<DramaScriptNodeDataExit> _parser = new pb::MessageParser<DramaScriptNodeDataExit>(() => new DramaScriptNodeDataExit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DramaScriptNodeDataExit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DramaScript.StructureReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DramaScriptNodeDataExit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DramaScriptNodeDataExit(DramaScriptNodeDataExit other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DramaScriptNodeDataExit Clone() {
      return new DramaScriptNodeDataExit(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DramaScriptNodeDataExit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DramaScriptNodeDataExit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DramaScriptNodeDataExit other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class DramaScriptNodeDataPlayAnimation : pb::IMessage<DramaScriptNodeDataPlayAnimation> {
    private static readonly pb::MessageParser<DramaScriptNodeDataPlayAnimation> _parser = new pb::MessageParser<DramaScriptNodeDataPlayAnimation>(() => new DramaScriptNodeDataPlayAnimation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DramaScriptNodeDataPlayAnimation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DramaScript.StructureReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DramaScriptNodeDataPlayAnimation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DramaScriptNodeDataPlayAnimation(DramaScriptNodeDataPlayAnimation other) : this() {
      animationName_ = other.animationName_;
      speed_ = other.speed_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DramaScriptNodeDataPlayAnimation Clone() {
      return new DramaScriptNodeDataPlayAnimation(this);
    }

    /// <summary>Field number for the "AnimationName" field.</summary>
    public const int AnimationNameFieldNumber = 1;
    private string animationName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AnimationName {
      get { return animationName_; }
      set {
        animationName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Speed" field.</summary>
    public const int SpeedFieldNumber = 2;
    private float speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DramaScriptNodeDataPlayAnimation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DramaScriptNodeDataPlayAnimation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AnimationName != other.AnimationName) return false;
      if (Speed != other.Speed) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AnimationName.Length != 0) hash ^= AnimationName.GetHashCode();
      if (Speed != 0F) hash ^= Speed.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AnimationName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AnimationName);
      }
      if (Speed != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Speed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AnimationName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AnimationName);
      }
      if (Speed != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DramaScriptNodeDataPlayAnimation other) {
      if (other == null) {
        return;
      }
      if (other.AnimationName.Length != 0) {
        AnimationName = other.AnimationName;
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AnimationName = input.ReadString();
            break;
          }
          case 21: {
            Speed = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DramaScriptNodeDataSpawnEffect : pb::IMessage<DramaScriptNodeDataSpawnEffect> {
    private static readonly pb::MessageParser<DramaScriptNodeDataSpawnEffect> _parser = new pb::MessageParser<DramaScriptNodeDataSpawnEffect>(() => new DramaScriptNodeDataSpawnEffect());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DramaScriptNodeDataSpawnEffect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DramaScript.StructureReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DramaScriptNodeDataSpawnEffect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DramaScriptNodeDataSpawnEffect(DramaScriptNodeDataSpawnEffect other) : this() {
      path_ = other.path_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DramaScriptNodeDataSpawnEffect Clone() {
      return new DramaScriptNodeDataSpawnEffect(this);
    }

    /// <summary>Field number for the "Path" field.</summary>
    public const int PathFieldNumber = 1;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DramaScriptNodeDataSpawnEffect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DramaScriptNodeDataSpawnEffect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Path != other.Path) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Path.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Path);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DramaScriptNodeDataSpawnEffect other) {
      if (other == null) {
        return;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Path = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
